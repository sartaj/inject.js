(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.lean = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports.inject = function(file) {

    "use strict";

    var firstScript;

    function readFirstScript() {
        // if (!firstScript || !firstScript.parentNode) {
        //     firstScript = document.head;
        // }
        return document.head;
    }

    function getFileType(file) {

        var fileType;

        fileType = file.split('.');
        fileType = fileType[fileType.length - 1];

        // console.log("fileType", fileType);

        return fileType;

    }

    function injectFile(file, fileType) {

        // console.log('injectFile', fileType);

        var injectFile = {
            'js': injectJs,
            'css': injectCss,
            'html': injectHtml
        }

        injectFile[fileType](file);

    }

    function injectJs(file) {


        // console.log("injectJs", file)

        var script = document.createElement('script');
        script.src = file;

        // Inject script into to document
        var doc = readFirstScript();
        doc.appendChild(script);

    }


    function injectCss(file) {

        // console.log("injectCss", file)

        // Create stylesheet link
        var link = document.createElement('link');

        // Add attributes
        link.href = file;
        link.rel = 'stylesheet';

        // Technique to force non-blocking loading from:
        // https://github.com/filamentgroup/loadCSS/blob/master/loadCSS.js#L20
        link.media = 'only x';
        link.type = 'text/css';

        // Inject script into to document
        var doc = readFirstScript();
        doc.appendChild(link);

    }


    function injectHtml(file) {


        // console.log("injectHtml", file);

        // Create stylesheet link
        var link = document.createElement('link');

        // Add attributes
        link.href = file;
        link.rel = 'import';

        // Inject script into to document
        var doc = readFirstScript();
        doc.appendChild(link);

    }

    function run() {

        var fileType = getFileType(file);
        // console.log("fileType", fileType);
        injectFile(file, fileType);

    }

    run();

}

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvbGVhbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJtb2R1bGUuZXhwb3J0cy5pbmplY3QgPSBmdW5jdGlvbihmaWxlKSB7XG5cbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBmaXJzdFNjcmlwdDtcblxuICAgIGZ1bmN0aW9uIHJlYWRGaXJzdFNjcmlwdCgpIHtcbiAgICAgICAgLy8gaWYgKCFmaXJzdFNjcmlwdCB8fCAhZmlyc3RTY3JpcHQucGFyZW50Tm9kZSkge1xuICAgICAgICAvLyAgICAgZmlyc3RTY3JpcHQgPSBkb2N1bWVudC5oZWFkO1xuICAgICAgICAvLyB9XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5oZWFkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEZpbGVUeXBlKGZpbGUpIHtcblxuICAgICAgICB2YXIgZmlsZVR5cGU7XG5cbiAgICAgICAgZmlsZVR5cGUgPSBmaWxlLnNwbGl0KCcuJyk7XG4gICAgICAgIGZpbGVUeXBlID0gZmlsZVR5cGVbZmlsZVR5cGUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJmaWxlVHlwZVwiLCBmaWxlVHlwZSk7XG5cbiAgICAgICAgcmV0dXJuIGZpbGVUeXBlO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5qZWN0RmlsZShmaWxlLCBmaWxlVHlwZSkge1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdpbmplY3RGaWxlJywgZmlsZVR5cGUpO1xuXG4gICAgICAgIHZhciBpbmplY3RGaWxlID0ge1xuICAgICAgICAgICAgJ2pzJzogaW5qZWN0SnMsXG4gICAgICAgICAgICAnY3NzJzogaW5qZWN0Q3NzLFxuICAgICAgICAgICAgJ2h0bWwnOiBpbmplY3RIdG1sXG4gICAgICAgIH1cblxuICAgICAgICBpbmplY3RGaWxlW2ZpbGVUeXBlXShmaWxlKTtcblxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluamVjdEpzKGZpbGUpIHtcblxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaW5qZWN0SnNcIiwgZmlsZSlcblxuICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHNjcmlwdC5zcmMgPSBmaWxlO1xuXG4gICAgICAgIC8vIEluamVjdCBzY3JpcHQgaW50byB0byBkb2N1bWVudFxuICAgICAgICB2YXIgZG9jID0gcmVhZEZpcnN0U2NyaXB0KCk7XG4gICAgICAgIGRvYy5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbmplY3RDc3MoZmlsZSkge1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaW5qZWN0Q3NzXCIsIGZpbGUpXG5cbiAgICAgICAgLy8gQ3JlYXRlIHN0eWxlc2hlZXQgbGlua1xuICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcblxuICAgICAgICAvLyBBZGQgYXR0cmlidXRlc1xuICAgICAgICBsaW5rLmhyZWYgPSBmaWxlO1xuICAgICAgICBsaW5rLnJlbCA9ICdzdHlsZXNoZWV0JztcblxuICAgICAgICAvLyBUZWNobmlxdWUgdG8gZm9yY2Ugbm9uLWJsb2NraW5nIGxvYWRpbmcgZnJvbTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZpbGFtZW50Z3JvdXAvbG9hZENTUy9ibG9iL21hc3Rlci9sb2FkQ1NTLmpzI0wyMFxuICAgICAgICBsaW5rLm1lZGlhID0gJ29ubHkgeCc7XG4gICAgICAgIGxpbmsudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgICAgICAgLy8gSW5qZWN0IHNjcmlwdCBpbnRvIHRvIGRvY3VtZW50XG4gICAgICAgIHZhciBkb2MgPSByZWFkRmlyc3RTY3JpcHQoKTtcbiAgICAgICAgZG9jLmFwcGVuZENoaWxkKGxpbmspO1xuXG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbmplY3RIdG1sKGZpbGUpIHtcblxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaW5qZWN0SHRtbFwiLCBmaWxlKTtcblxuICAgICAgICAvLyBDcmVhdGUgc3R5bGVzaGVldCBsaW5rXG4gICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuXG4gICAgICAgIC8vIEFkZCBhdHRyaWJ1dGVzXG4gICAgICAgIGxpbmsuaHJlZiA9IGZpbGU7XG4gICAgICAgIGxpbmsucmVsID0gJ2ltcG9ydCc7XG5cbiAgICAgICAgLy8gSW5qZWN0IHNjcmlwdCBpbnRvIHRvIGRvY3VtZW50XG4gICAgICAgIHZhciBkb2MgPSByZWFkRmlyc3RTY3JpcHQoKTtcbiAgICAgICAgZG9jLmFwcGVuZENoaWxkKGxpbmspO1xuXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKCkge1xuXG4gICAgICAgIHZhciBmaWxlVHlwZSA9IGdldEZpbGVUeXBlKGZpbGUpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZpbGVUeXBlXCIsIGZpbGVUeXBlKTtcbiAgICAgICAgaW5qZWN0RmlsZShmaWxlLCBmaWxlVHlwZSk7XG5cbiAgICB9XG5cbiAgICBydW4oKTtcblxufVxuIl19
